# -*- coding: utf-8 -*-
"""Sentiment Analysis - NLTK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sv_xe0v2LZBEohUxmFW8mwSpBLBK4EbC

# **Sentiment Analysis of IMDB Movie Reviews**

#### Problem Statement:

In this, we have to predict the number of positive, neutral and negative reviews based on sentiments by using Logistic Regression.
"""

# import python libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

# import csv file in your path
vn_reviews = pd.read_csv('/violent_ nature_reviews.csv')
vn_reviews.head()

"""### **Exploratery data analysis**"""

vn_reviews.shape

vn_reviews.describe()

vn_reviews.isnull().sum()

"""#### **Sentiment count**"""

vn_reviews.Ratings.value_counts()

"""#### **Data Visualization**"""

plt.pie(vn_reviews.Ratings.value_counts(), labels=[7,6,1,8,3,4,5,2,9], autopct='%1.1f%%')
plt.title('percentage share of ratings')
plt.show()

"""Minimum of the viewers of the movie 'in A Violent Nature' have reviewed as a good flim with the percentage of 4.3%

Based the value counts of the ratings, we can assume that the Positive ratings would be around ratings of 7,8,9
, the Neutral ratings of 4,5,6 stars and the negative ratings of 1,2,3 stars.

#Replacing the values of 7-9 as positive comments or 1
#values of 4-6 as neutral comments or 0
#values of 1-3 as negative comments or -1
"""

vn={1:-1, 2:-1, 3:-1, 4:0, 5:0, 6:0, 7:1, 8:1, 9:1}
vn_reviews['Ratings']=vn_reviews['Ratings'].replace(vn)
vn_reviews['Ratings'].value_counts()

plt.pie(vn_reviews.Ratings.value_counts(),labels=['Positive','Neutral','Negative'], autopct='%1.1f%%')
plt.title('sentiments percentage')
plt.show()

from transformers import pipeline

sentiment_pipeline = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english", truncation=True)

def analyze_sentiment(text):
    # Truncate if the text exceeds 512 tokens
    return sentiment_pipeline(text[:512])[0]['label']

vn_reviews['Sentiment'] = vn_reviews['Comments'].apply(analyze_sentiment)

vn_reviews.head()

vn_reviews['Sentiment_Binary'] = vn_reviews['Sentiment'].apply(lambda x: 1 if x == 'POSITIVE' else 0)

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

tfidf = TfidfVectorizer(max_features=5000)
x = tfidf.fit_transform(vn_reviews['Comments']).toarray()
y = vn_reviews['Sentiment_Binary']

train_comments, test_comments, train_sentiments, test_sentiments = train_test_split(x, y, test_size=0.2, random_state=42)

lr_model = LogisticRegression()
lr_model.fit(train_comments,train_sentiments)

y_pred = lr_model.predict(test_comments)

print("Classification Report:\n", classification_report(test_sentiments, y_pred))
print("Accuracy Score: ", accuracy_score(test_sentiments, y_pred))

print(confusion_matrix(y_pred_train,y_train))

from wordcloud import WordCloud

#Creating word cloud for all comments
all_comments = ' '.join(vn_reviews['Comments'])
wordcloud_all = WordCloud(width=800, height=400, background_color='white', max_words=200).generate(all_comments)

# Creating word clouds for positive comments
positive_comments = ' '.join(vn_reviews[vn_reviews['Sentiment'] == 'POSITIVE']['Comments'])
wordcloud_positive = WordCloud(width=800, height=400, background_color='white', max_words=200).generate(positive_comments)

# Creating word clouds for negative comments
negative_comments = ' '.join(vn_reviews[vn_reviews['Sentiment'] == 'NEGATIVE']['Comments'])
wordcloud_negative = WordCloud(width=800, height=400, background_color='white', max_words=200).generate(negative_comments)

plt.figure(figsize=(10, 5))
# All comments
plt.subplot(1, 3, 1)
plt.imshow(wordcloud_all, interpolation='bilinear')
plt.title('All Comments')
plt.axis('off')

# Positive comments
plt.subplot(1, 3, 2)
plt.imshow(wordcloud_positive, interpolation='bilinear')
plt.title('Positive Comments')
plt.axis('off')

# Negative comments
plt.subplot(1, 3, 3)
plt.imshow(wordcloud_negative, interpolation='bilinear')
plt.title('Negative Comments')
plt.axis('off')

# Show the plot
plt.tight_layout()
plt.show()